resources:
- "@type": type.googleapis.com/envoy.config.listener.v3.Listener
  name: listener_0
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 10000
  filter_chains:
  - filters:
      name: envoy.filters.network.http_connection_manager
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
        stat_prefix: ingress_http
        http_filters:
        - name: envoy.filters.http.router
        route_config:
          name: local_route
          virtual_hosts:
          - name: local_service
            domains:
            - "*"
            routes:
            - match:
                prefix: "/"
              route:
                cluster: localsvc

- "@type": type.googleapis.com/envoy.config.listener.v3.Listener
  name: listener_1
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 8081
  filter_chains:
  - filters:
    - name: envoy.filters.network.http_connection_manager
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
        stat_prefix: ingress_http
        http_filters:
        - name: envoy.filters.http.local_ratelimit
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
            stat_prefix: http_local_rate_limiter
        # - name: envoy.filters.http.wasm
        #   typed_config:
        #     "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
        #     config:
        #       name: "my_plugin"
        #       vm_config:
        #         runtime: "envoy.wasm.runtime.v8"
        #         code:
        #           local:
        #             filename: "/etc/envoy/plugins/envoy_wasm_filter.wasm"
        #         allow_precompiled: true
#        - name: envoy.filters.http.lua
#          typed_config:
#            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
#            inline_code: |
#              ---Comment
#            source_codes:
#              accesslog.lua:
#                filename: /etc/envoy/plugins/accesslog.lua
#              limit-response-rewrite.lua:
#                filename: /etc/envoy/plugins/limit-response-rewrite.lua
              
        - name: envoy.filters.http.router
        route_config:
          name: local_route
          virtual_hosts:
          - name: saltbo
            domains: ["*"]
            routes:
            - match:
                prefix: "/"
              route:
                host_rewrite_literal: saltbo.cn
                cluster: localsvc
            typed_per_filter_config:
              envoy.filters.http.local_ratelimit:
                "@type": type.googleapis.com/udpa.type.v1.TypedStruct
                type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                value:
                  stat_prefix: http_local_rate_limiter
                  token_bucket:
                    max_tokens: 10
                    tokens_per_fill: 10
                    fill_interval: 60s
                  filter_enabled:
                    runtime_key: local_rate_limit_enabled
                    default_value:
                      numerator: 100
                      denominator: HUNDRED
                  filter_enforced:
                    runtime_key: local_rate_limit_enforced
                    default_value:
                      numerator: 100
                      denominator: HUNDRED
                  response_headers_to_add:
                    - append: true
                      header:
                        key: x-local-rate-limit
                        value: 'true'
              envoy.filters.http.lua:
                "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                name: limit-response-rewrite.lua

- "@type": type.googleapis.com/envoy.config.listener.v3.Listener
  name: listener_2
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 8000
  filter_chains:
  - filters:
    - name: envoy.filters.network.http_connection_manager
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
        stat_prefix: ingress_http
        http_filters:
        - name: envoy.filters.http.oauth2
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.oauth2.v3.OAuth2
            config:
              token_endpoint:
                cluster: oauth
                uri: https://id-ontest.lixiang.com/api/token
                timeout: 3s
              authorization_endpoint: https://id-ontest.lixiang.com/api/auth
              redirect_uri: "http://%REQ(:authority)%/callback"
              redirect_path_matcher:
                path:
                  exact: /callback
              signout_path:
                path:
                  exact: /signout
              forward_bearer_token: true
              credentials:
                client_id: 7bhk2L4h1YJm0gdiv0DgrN
                token_secret:
                  name: token
                  sds_config:
                    path: "/etc/envoy/token-secret.yaml"
                hmac_secret:
                  name: hmac
                  sds_config:
                    path: "/etc/envoy/hmac-secret.yaml"
              # (Optional): defaults to 'user' scope if not provided
              auth_scopes:
#              - openid
              - offline_access
              - read:profile
#               - istio:resource:read
#               - istio:resource:op
              # - user
              # - openid
              # - email
              # (Optional): set resource parameter for Authorization request
              resources:
              - 1GDY9heeywMdHEEwDneHfx
              # - http://example.com
              auth_type: "BASIC_AUTH"
        - name: envoy.filters.http.jwt_authn
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
            providers:
              oidc_provider:
                issuer: https://id-ontest.lixiang.com/api/discov/7bhk2L4h1YJm0gdiv0DgrN
                audiences:
                  - 1GDY9heeywMdHEEwDneHfx
                remote_jwks:
                  http_uri:
                    uri: https://id-ontest.lixiang.com/api/pubkeys?client_id=7bhk2L4h1YJm0gdiv0DgrN
                    cluster: oauth
                    timeout: 5s
                from_cookies:
                  - BearerToken
#                forward: true
                payload_in_metadata: jwt_payload
                forward_payload_header: x-jwt-payload
            rules:
              - match:
                  prefix: /
                requires:
                  requires_any:
                    requirements:
                      - provider_name: oidc_provider
                      - allow_missing: {}
                      # - allow_missing_or_failed: {}
        - name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inline_code: |
              function envoy_on_request(request_handle)
                local payload = request_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.jwt_authn")["jwt_payload"]
                request_handle:headers():add("jwt-extracted-sub", payload.sub)    
              end

              function envoy_on_response(response_handle)
              end
        - name: envoy.filters.http.router
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
        route_config:
          virtual_hosts:
          - name: service
            domains: ["*"]
            routes:
            - match:
                prefix: "/"
              route:
                cluster: httpbin
                # timeout: 30s